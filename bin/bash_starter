#!/usr/bin/env bash
#
# <name of thing>
# By Brad Parbs <brad@bradparbs.com>
#
# <command> : <description of functionality>
#
# Copyright (C) 2015 Brad Parbs
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.1.6.0

# Version number
version_number=1.0.0

# We check this before anything else, so we can debug it
# This will output all the commands that are being run
if [[ "$1" == "internal_debug" ]]; then
    set -x
    shift
fi

# Airplane mode. Pass x as the first argument to kill all internet things
# <command> x subcommand, This will probably break things
# and stuff though.
internet=true
if [[ "$1" == "x" ]]; then
    internet=false
    shift
fi

# Verify we have a home variable set, and force it if we can
home=${HOME:-"~"}

# If we have tput, let's set our colors
if [[ ! -z $(which tpuasdft 2>/dev/null) ]]; then
    normal=$(tput sgr0)
    bold=$(tput bold)
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 4)
    magenta=$(tput setaf 5)
    cyan=$(tput setaf 6)
fi

# Usage: info "message"
# Example: info "It's Working"
# Output (to STDOUT): [...] It's Working
function info() {
    printf "%b" "[${green}...${normal}] $1\n"
}

# Usage: prompt "question"
# Example: prompt "What's Your Name?"
# Output (to STDOUT): [ ? ] What's Your Name?
function prompt() {
    printf "%b" "[${yellow} ? ${normal}] $1 "
}

# Usage: error ["message"]
# Example: error "You're Ugly"
# Output (to STDERR): [ERROR] /script/name: You're Ugly
function error() {
    printf "%b" "[${red}ERROR${normal}] ${0}: ${1:-'Unkown Error'}\n" >&2
}

# Usage: fail "message" [exit_code]
# Example: fail "Unknown Option" 254
function fail() {
    error "$1"

    case $2 in
        ''|*[!0-9]*)
            exit_code=1
            ;;
        *)
            exit_code=$2
        ;;
    esac

    exit $exit_code
}

# ask function https://gist.github.com/davejamesmiller/1965569
# Usage: ask "Yes or No?" [default option]
# Example: if "Yes or No?" Y; then
function ask() {
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt_tail="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt_tail="y/N"
            default=N
        else
            prompt_tail="y/n"
            default=
        fi

        # Ask the question
        prompt "$1 [$prompt_tail]"
        read REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

# Usage: show_help [exit_code]
# Example: show_help 254
function show_help() {
    cat <<HELP
    Usage:
        $0 [OPTION]...

    OPTIONS:
        --help, -h:    Show this help and exit

    Example:
        $0 **example**

HELP
    # Fail with general error if status code passed
    case $1 in
        ''|*[!0-9]*)
            exit_code=1
            ;;
        *)
            exit_code=$1
        ;;
    esac
    exit $exit_code
}

function argument_expected() {
    fail "$1 expected an argument"
}

function check_args() {
    while [ ! -z "$1" ]; do
        local arg="$1"
        case "$1" in
            -h|--help)
                local help=0
                shift
                ;;
            -ex1|--example-one)
                shift

                if [ -z $1 ] || [[ "$1" == -* ]]; then
                    argument_expected $arg
                fi

                example_one=$1
                shift
                ;;
            -ex2|--example-two)
                # Simple boolean flagâ€“call function here
                example_two="Two"
                shift
                ;;
            *)
                fail "Unknown option $1"
                shift
                ;;
        esac
    done

    if [ ! -z $help ]; then
        show_help $help
    fi

    finally

    exit 0
}

function main() {
    if [ -z $1 ]; then
        show_help
    fi

    check_args "$@"
}

main "$@"
