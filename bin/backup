#!/usr/bin/env bash

# When adding target, add to `all` as well as single command.

function run_setup() {
	set_colors
	echo ""
}

function set_colors() {
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	reset=$(tput sgr0)
}

function display_start() {
	echo "   $1  $2 ... "
}

function display_done() {
	if [[ "$1" == "error" ]];then
		echo "${red}${2}${reset}"
	else
		echo "${green}done.${reset}"
	fi
}

function display_message() {
	echo ""
	tput bold
	echo "  $1${reset} "
	echo ""
}

function backup_batman() {
	display_start "ü¶áÔ∏è" "batman"
	ssh batman "rclone copy --fast-list --progress --copy-links --checkers 20 --transfers 20 /etc/apache2 b2:parbs-batman/etc/apache2"
	ssh batman "rclone copy --fast-list --progress --copy-links --checkers 20 --transfers 20 /var/www b2:parbs-batman/var/www"
	display_done
}

function backup_xavier() {
	display_start "ü¶Ω" "xavier"
	ssh xavier "rclone copy --fast-list --progress --copy-links --checkers 20 --transfers 20 /etc/caddy b2:parbs-xavier/etc/caddy"
	ssh xavier "rclone copy --fast-list --progress --copy-links --checkers 20 --transfers 20 /var/www b2:parbs-xavier/var/www"
	ssh xavier "rclone copy --fast-list --progress --copy-links --checkers 20 --transfers 20 /root/docker b2:parbs-xavier/docker"
	display_done
}

function backup_pihole() {
	display_start "üçì" "pihole"
	ssh pihole "rclone copy --fast-list --progress --copy-links --exclude '.git/**' --checkers 50 --transfers 50 /var/www b2:parbs-pihole/var/www"
	ssh pihole "rclone copy --fast-list --progress --copy-links --exclude '.git/**' --exclude 'wp-gen/**' --exclude '.cache/**' --checkers 50 --transfers 50 /home/pi b2:parbs-pihole/home/pi"
	display_done
}

function backup_dropbox() {
	display_start "üóÑÔ∏è " "dropbox"
	# rclone copy --fast-list --progress --copy-links --checkers 8 --transfers 10 dropbox: b2:parbs-dropbox
	display_done
}

function backup_dropbox_local() {
	display_start "üìÅÔ∏è" "dropbox-local"
	rclone copy --fast-list --progress --copy-links --exclude '.git/**' --exclude 'node_modules/**' --exclude '.dropbox.cache/**' --checkers 50 --transfers 50 /Users/brad/Dropbox b2:parbs-dropbox
	display_done
}

function backup_sdr() {
	display_start "üì°" "sdr"
	display_done error "not configured"
}

function backup_screen() {
	display_start "üñ•Ô∏è " "screen"
	display_done error "not configured"
}

function backup_github() {
	display_start "üíΩÔ∏è" "github"

	./gh-backup user bradp

	display_done
}

function backup_github_stars() {
	display_start "‚≠êÔ∏è " "github-stars"

	./gh-backup starred bradp

	display_done
}

function backup_media_hdd() {
	display_start "üìÄÔ∏è" "media-hdd"

	if [[ -d /Volumes/Small/Media ]]; then
		rclone copy --fast-list --progress --copy-links --checkers 50 --transfers 100 /Volumes/Small/Media b2:parbs-media

		display_done
	else
		display_done error "hard drive not found"
	fi
}

function backup_pocket() {
	cd "/Users/brad/Dropbox/Working/backups/pocket" || exit

	items=$( bash api pocket /get | jq -r ".list[].resolved_url")

	date=$(date +"%Y-%m-%d")
	mkdir "$date" 2> /dev/null
	cd "$date" || exit

	for i in $items; do
		echo ""
		echo "$i"
		wget --quiet --show-progress --progress=bar:force:noscroll --page-requisites "$i"
	done

	yt=$(ls www.youtube.com/watch*)
	yt2=$(ls youtube.com/watch*)

	mkdir youtube 2> /dev/null
	cd youtube || exit

	for vid in $yt $yt2; do
		vid="${vid#www.youtube.com/watch?v=}"
		vid="${vid#youtube.com/watch?v=}"
		vid="${vid::11}"
		youtube-dl "$vid"
		echo "$vid"
	done
	cd ../ || exit

	rm -rf youtube.com 2> /dev/null
	rm -rf www.youtube.com 2> /dev/null

}

function backup_all() {
	backup_xavier
	backup_pihole
	backup_sdr
	backup_screen
	backup_dropbox
	backup_dropbox_local
	backup_github
	backup_github_stars
	backup_pocket
}

function display_help() {
	echo "${red} Please include a target. ${reset}"
	echo ""
	echo "${red} Available targets: ${reset}"
	echo "  ‚Ä¢ xavier"
	echo "  ‚Ä¢ pihole"
	echo "  ‚Ä¢ sdr"
	echo "  ‚Ä¢ screen"
	echo "  ‚Ä¢ dropbox"
	echo "  ‚Ä¢ dropbox-local"
	echo "  ‚Ä¢ github"
	echo "  ‚Ä¢ github-stars"
	echo "  ‚Ä¢ media-hdd"
	echo "  ‚Ä¢ pocket"
	echo ""

	exit
}

run_setup

if [[ -z "$1" ]];then
	display_help
fi

display_message "üöö Starting backup ..."

if [[ "$1" == "all" ]]; then
	backup_all
elif [[ "$1" == "xavier" ]]; then
	backup_xavier
elif [[ "$1" == "pihole" ]]; then
	backup_pihole
elif [[ "$1" == "sdr" ]]; then
	backup_sdr
elif [[ "$1" == "screen" ]]; then
	backup_screen
elif [[ "$1" == "dropbox" ]]; then
	backup_dropbox
elif [[ "$1" == "dropbox-local" ]]; then
	backup_dropbox_local
elif [[ "$1" == "github" ]]; then
	backup_github
elif [[ "$1" == "github-stars" ]]; then
	backup_github_stars
elif [[ "$1" == "media-hdd" ]]; then
	backup_media_hdd
elif [[ "$1" == "pocket" ]]; then
	backup_pocket
else

	display_message "üî¥Ô∏è Backup failed"
	display_help
fi

display_message "‚úÖÔ∏è Completed backup!"
